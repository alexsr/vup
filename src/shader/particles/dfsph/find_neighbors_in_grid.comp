#version 450

layout (local_size_x = 128) in;

#include "particle_util.inc.comp"

#include "ssbos.inc.comp"

#include "/../../data_structures/uniform_grid.inc.comp"

layout (std430, binding = 4) buffer grid_buffer {
    int grid[];
};

layout (std430, binding = 5) buffer cell_counter_buffer {
    int cell_counter[];
};

layout (std430, binding = 6) buffer grid_parameters {
    Fixed_uniform_grid_params grid_params;
};

int find_neighbors(uint id, vec4 pos) {
    int i = int((pos.x - grid_params.grid_min.x) / grid_params.cell_size.x);
    int j = int((pos.y - grid_params.grid_min.y) / grid_params.cell_size.y);
    int k = int((pos.z - grid_params.grid_min.z) / grid_params.cell_size.z);
    int neighbor_count = 0;
    int max_x = min(i + 2, grid_params.cell_count.x);
    int max_y = min(j + 2, grid_params.cell_count.y);
    int max_z = min(k + 2, grid_params.cell_count.z);
    for (int x = max(0, i - 1); x < max_x; x++) {
        int x_counter_offset = x * grid_params.cell_count.y * grid_params.cell_count.z;
        int x_offset = x_counter_offset * grid_params.cell_capacity;
        for (int y = max(0, j - 1); y < max_y; y++) {
            int y_counter_offset = y * grid_params.cell_count.z;
            int y_offset = y_counter_offset * grid_params.cell_capacity;
            for (int z = max(0, k - 1); z < max_z; z++) {
                int z_offset = z * grid_params.cell_capacity;
                int counter_id = x_counter_offset + y_counter_offset + z;
                int n = min(grid_params.cell_capacity, cell_counter[counter_id]);
                for (int o = 0; o < n; o++) {
                    int other = grid[x_offset + y_offset + z_offset + o];
                    float dist = distance(pos.xyz, particles[other].pos.xyz);
                    if (neighbor_count >= NEIGHBOR_AMOUNT) {
                        return neighbor_count;
                    }
                    if (dist <= demo_consts.h && id != other) {
                        neighbor[id * NEIGHBOR_AMOUNT + neighbor_count] = other;
                        neighbor_count++;
                    }
                }
            }
        }
    }
    return neighbor_count;
}

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= N) {
        return;
    }
    int neighbor_count = find_neighbors(id, particles[id].pos);
    neighbor_counter[id] = neighbor_count;
}
