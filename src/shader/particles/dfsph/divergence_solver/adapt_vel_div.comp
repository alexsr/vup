#version 450

layout (local_size_x = 128) in;

#include "../particle_util.inc.comp"

#include "../ssbos.inc.comp"

#include "../boundary.inc.comp"

#include "../../../data_structures/compact_grid.inc.comp"

uniform float dt;

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= N) {
        return;
    }
    Particle p = particles[id];
    vec4 vel_adjustment = vec4(0.0f);
    for (int i = 0; i < neighbors_counter[id]; i++) {
        int j = neighbors[id * NEIGHBOR_AMOUNT + i];
        Particle p_other = particles[j];
        if (abs(p.K + p_other.K) > demo_consts.eps) {
            vec4 pij = vec4((p.pos - p_other.pos).xyz, 0);
            vel_adjustment += p_other.mass * (p.K_v + p_other.K_v)
                                * demo_consts.kernel_grad * cubic_grad(demo_consts.h, p.pos - p_other.pos);
        }
    }
    if (abs(p.K) > demo_consts.eps) {
        for (int i = 0; i < boundary_neighbors_counter[id]; i++) {
            int j = boundary_neighbors[id * NEIGHBOR_AMOUNT + i];
            float boundary_psi = boundaries[j].pos.w;
            vec4 pij = vec4((p.pos - boundaries[j].pos).xyz, 0);
            vel_adjustment += p.K_v * boundary_psi * demo_consts.kernel_grad * cubic_grad(demo_consts.h, pij);
        }
    }
    particles[id].vel = p.vel + demo_consts.dt * vel_adjustment;
}
