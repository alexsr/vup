#version 450

layout (local_size_x = 128) in;

#include "particle_util.inc.comp"

#include "ssbos.inc.comp"

#include "boundary.inc.comp"

#include "/../../data_structures/compact_grid.inc.comp"

#include "heat_sources.inc.comp"

//https://animation.rwth-aachen.de/media/papers/2018-EG-ImplicitVisco.pdf

void main() {    
    uint id = gl_GlobalInvocationID.x;
    if (id >= N) {
        return;
    }
    Particle p = particles[id];
    float temp_change_ext = 0;
    p.temp_change = 0.0f;
    vec4 normal = vec4(0.0f);
    for (int i = 0; i < neighbors_counter[id]; i++) {
        int j = neighbors[id * NEIGHBOR_AMOUNT + i];
        Particle p_other = particles[j];
        vec4 pij = vec4((p.pos - p_other.pos).xyz, 0);
        normal += p_other.mass / p_other.density * demo_consts.kernel_grad * cubic_grad(demo_consts.h, pij);
        p.temp_change += p_other.mass / p_other.density * (p.temperature - p_other.temperature)
                            * dot(pij, demo_consts.kernel_grad * cubic_grad(demo_consts.h, pij))
                            / (dot(pij, pij) + 0.01f * demo_consts.h2);
    }
    normal *= demo_consts.h;
	
	if (length(normal) > 0.00001f) {
		for (int i = 0; i < H_COUNT; i++) {
			Heat_source h_source = heat_sources[i];
			float q = h_source.wattage * 1.0f / pow((sqrt(2.0f) - 1) / h_source.pos.w * length((p.pos - h_source.pos).xyz) + 1, 2);
			temp_change_ext += q * 3.1415f * demo_consts.r * demo_consts.r;
		}
	}
    particles[id].temp_change = 2.0f * p.temp_change * p.heat_const / p.density + temp_change_ext;
}
