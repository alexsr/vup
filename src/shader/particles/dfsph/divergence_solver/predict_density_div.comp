#version 450

layout (local_size_x = 128) in;

#include "../particle_util.inc.comp"

#include "../ssbos.inc.comp"

#include "../boundary.inc.comp"

#include "../../../data_structures/compact_grid.inc.comp"

layout (std430, binding = 5) buffer densities {
    float scalar_new[];
};

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= N) {
        return;
    }
    Particle p = particles[id];
    int neighbor_counter = 0;
    p.density_adv = 0;
    for (int i = 0; i < neighbors_counter[id]; i++) {
        int j = neighbors[id * NEIGHBOR_AMOUNT + i];
        Particle p_other = particles[j];
        vec4 pij = vec4((p.pos - p_other.pos).xyz, 0);
        p.density_adv += p_other.mass * dot(p.vel - p_other.vel, demo_consts.kernel_grad
                         * cubic_grad(demo_consts.h, p.pos - p_other.pos));
    }
    for (int i = 0; i < boundary_neighbors_counter[id]; i++) {
        int j = boundary_neighbors[id * NEIGHBOR_AMOUNT + i];
        float boundary_psi = boundaries[j].pos.w;
        vec4 pij = vec4((p.pos - boundaries[j].pos).xyz, 0);
        p.density_adv += boundary_psi * demo_consts.kernel_grad
                            * dot(p.vel, cubic_grad(demo_consts.h, pij));
    }
    p.density_adv = max(p.density_adv, 0.0);
    if (neighbors_counter[id] < 20) {
        p.density_adv = 0;
    }
    particles[id].density_adv = p.density_adv;
    scalar_new[id] = p.density_adv;
    particles[id].K_v = p.density_adv * p.alpha * demo_consts.inv_dt;
}
