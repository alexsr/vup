#version 450

layout (local_size_x = 128) in;

#include "particle_util.inc.comp"

#include "ssbos.inc.comp"

layout (std430, binding = 9) buffer boundary_buffer {
    vec4 boundaries[];
};

//https://animation.rwth-aachen.de/media/papers/2018-EG-ImplicitVisco.pdf

void main() {    
    uint id = gl_GlobalInvocationID.x;
    if (id >= N) {
        return;
    }
    Particle p = particles[id];
    float temp = 0;
    p.temp_change = 0.0f;
    for (int i = 0; i < neighbor_counter[id]; i++) {
        int j = neighbor[id * NEIGHBOR_AMOUNT + i];
        Particle p_other = particles[j];
        vec4 pij = vec4((p.pos - p_other.pos).xyz , 0.0f);
        p.temp_change += 2.0f * p_other.mass / p_other.density * (p.temperature - p_other.temperature)
                * demo_consts.kernel_laplace * dot(pij, cubic_grad(demo_consts.h, pij))
                / (dot(pij, pij) + 0.01f * demo_consts.h2);
        //temp += p[j].mass / p[j].density * dot(p[j].temperature_grad, demo_consts.kernel_grad * cubic_grad(demo_consts.h, p[id].pos - p[j].pos));
    }
    for (int j = 0; j < B; j++) {
        float boundary_psi = boundaries[j].w;
        vec4 pij = vec4((p.pos - boundaries[j]).xyz, 0);
        if (dot(pij, pij) < demo_consts.h2) {
            p.temp_change += 2.0f * boundary_psi / p.density * (p.temperature - 373.15f)
                * demo_consts.kernel_laplace * dot(pij, cubic_grad(demo_consts.h, pij))
                / (dot(pij, pij) + 0.01f * demo_consts.h2);
        }
    }
    // float t = clamp(distance(p.pos, vec4(0,-1,0,1)), 0, 1);
    // float temp_ext = (demo_consts.temperature - p.temperature) * demo_consts.heat_const;
    particles[id].temp_change = p.temp_change * p.heat_const / p.density;// + temp_ext * (1 - t);
    
    //p[id].density = p[id].density / (1.0f + 0.88 * 0.0001 * p[id].temp_change);
}
