#version 450

layout (local_size_x = 128) in;

#include "../particle_util.inc.comp"

#include "../ssbos.inc.comp"

#include "../boundary.inc.comp"

#include "../../../data_structures/compact_grid.inc.comp"

uniform float visc_const;

layout (std430, binding = 5) buffer alpha_denom_buffer {
    float alpha_denom[];
};

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= N) {
        return;
    }
    Particle p = particles[id];
    vec4 res = vec4(0.0f);
    for (int i = 0; i < neighbors_counter[id]; i++) {
        int j = neighbors[id * NEIGHBOR_AMOUNT + i];
        Particle p_other = particles[j];
        vec4 pij = vec4((p.pos - p_other.pos).xyz, 0);
        res += 10.0f * (p.viscosity + p_other.viscosity) / 2.0f
                * p_other.mass / p_other.density
                * dot(pij.xyz, (p.p - p_other.p).xyz) * demo_consts.kernel_grad * cubic_grad(demo_consts.h, pij)
                / max((dot(pij.xyz, pij.xyz) + 0.01 * demo_consts.h2), demo_consts.eps);
    }
   for (int i = 0; i < boundary_neighbors_counter[id]; i++) {
        int j = boundary_neighbors[id * NEIGHBOR_AMOUNT + i];
        float boundary_psi = boundaries[j].pos.w;
        vec4 pij = vec4((p.pos - boundaries[j].pos).xyz, 0);
        res += 10.0f
                * boundary_psi / p.density
                * dot(pij.xyz, p.p.xyz) * demo_consts.kernel_grad * cubic_grad(demo_consts.h, pij)
                / max((dot(pij.xyz, pij.xyz) + 0.01 * demo_consts.h2), demo_consts.eps);
    }
    p.z.xyz = p.p.xyz - demo_consts.dt / p.density * res.xyz;
    particles[id].z = p.z;
    alpha_denom[id] = dot(p.p.xyz, p.z.xyz);
}
