#version 450

layout (local_size_x = 128) in;

#include "particles.inc.comp"

#include "/../viscosity.inc.comp"

uniform float dt;

layout (std430, binding = 3) buffer particles {
    Fluid_particle p[N];
};

layout (std430, binding = 4) buffer demo_constants{
    SPH_demo_constants demo_consts;
};

layout (std430, binding = 5) buffer neighborhood_data {
    int neighbor[NEIGHBOR_ARRAY_SIZE];
};

layout (std430, binding = 6) buffer neighborhood_count {
    int neighbor_counter[N];
};

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= N) {
        return;
    }
    p[id].dii = vec4(0.0);
    float visc_const = 0.002f;
    vec4 visc_force = vec4(0.0f);
    float density2 = p[id].density * p[id].density;
    for (int i = 0; i < neighbor_counter[id]; i++) {
        int j = neighbor[id * NEIGHBOR_AMOUNT + i];
        vec4 pij = p[id].pos - p[j].pos;
        visc_force -= calc_xsph_visc_force(p[j].mass, p[id].vel, p[j].vel, p[j].density)
                      * demo_consts.visc * visc(demo_consts.h, length(pij));
        p[id].dii -= p[j].mass / density2 * demo_consts.kernel_grad * cubic_grad(demo_consts.h, pij);
    }
    vec4 extern_force = vec4(0.0f);
    extern_force.y = -9.81f * p[id].mass;
    p[id].vel_adv = p[id].vel + dt * (visc_force * visc_const + extern_force) / p[id].mass;
}