#version 450

layout (local_size_x = 128) in;

#include "particle_util.inc.comp"

#include "ssbos.inc.comp"

uniform float dt;

layout (std140, binding = 0) uniform mvp {
    mat4 model;
    mat4 view;
    mat4 projection;
};

void integrate_euler(float dt) {
    uint id = gl_GlobalInvocationID.x;
    if (id >= N) {
        return;
    }
    p[id].pressure_accel = vec4(0.0f);
    float pressure_per_density2 = p[id].last_pressure / (p[id].density * p[id].density);
    for (int i = 0; i < neighbor_counter[id]; i++) {
        int j = neighbor[id * NEIGHBOR_AMOUNT + i];
        vec4 pij = p[id].pos - p[j].pos;
        p[id].pressure_accel -= p[j].mass * (pressure_per_density2 + p[j].last_pressure / (p[j].density * p[j].density))
                                * demo_consts.kernel_grad * cubic_grad(demo_consts.h, pij);
    }
    vec4 a = vec4(p[id].pressure_accel.xyz, 0.0f);
    p[id].vel = p[id].vel_adv + a * dt;
    p[id].pos += p[id].vel * dt;

    p[id].temperature += p[id].temp_change * dt;
}

float p_in_box(vec4 pos, vec3 b) {
    vec3 d = abs(pos.xyz) - b;
    return -1.0f * (min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0)));
}

vec3 calc_box_normal(vec4 pos, vec3 b) {
    vec4 eps = vec4(0.0005, 0.0, 0.0, 0.0);
  	vec3 n = vec3(p_in_box(pos + eps, b) - p_in_box(pos - eps, b),
                  p_in_box(pos + eps.yxyy, b) - p_in_box(pos - eps.yxyy, b),
                  p_in_box(pos + eps.yyxy, b) - p_in_box(pos - eps.yyxy, b));
  	return normalize(n);
}
vec3 reflect(vec3 d, vec3 n) {
    if (dot(d, n) < 0) {
        return d - 2.0f*dot(n, d)*n;
    }
    return d;
}
void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= N) {
        return;
    }
    integrate_euler(dt);
    vec3 bounds = vec3(1, 1, 1) - demo_consts.r;
    vec4 pos = p[id].pos;
    float dist_p = p_in_box(pos, bounds);
    if (dist_p < 0) {
        vec3 n = calc_box_normal(pos, bounds);
        p[id].pos.xyz -= dist_p * n;
        p[id].vel.xyz = reflect(p[id].vel.xyz, n);
    }

}
